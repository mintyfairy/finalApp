<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fa.plus.mapper.SiteMapper">

	<insert id="insertCart" parameterType="com.fa.plus.domain.site.SiteCart">
		insert into sitecart(memberIdx,detailNum,STARTDATE,ENDDATE,REG_DATE	) 
  			  values(#{memberIdx},#{detailNum},#{startDate},#{endDate},sysdate)
		
	</insert>
	
	
	<!-- 장바구니 부분삭제 구현시 필요 -->
	<delete id="deleteCart" parameterType="map">
	    DELETE FROM sitecart
	    WHERE memberIdx = #{memberIdx}
	    AND detailNum = #{detailNum}
	</delete>
	
	<delete id="deleteAllCart" parameterType="map">
	    DELETE FROM sitecart
	    WHERE memberIdx = #{memberIdx}
	</delete>
	

	
	<select id="findByCart" parameterType="com.fa.plus.domain.site.SiteCart" resultType="com.fa.plus.domain.site.SiteCart">
		
		 select sitecart.memberIdx,detailNum,to_char(STARTDATE,'yyyy-mm-dd') STARTDATE,to_char(ENDDATE,'yyyy-mm-dd') ENDDATE,to_char(REG_DATE,'yyyy-mm-dd') REG_DATE,filename thumbnail,siteName
		FROM sitecart 
		left join (select filename,detailNum dnum from sitedetailpic 
        where detailNum = #{detailNum}
        
        left join campingsite on campingsite.sitenum=sitedetail.sitenum
        ORDER BY sdpicnum 
		FETCH FIRST 1 ROWS ONLY
        ) on dnum=detailNum
		WHERE detailNum = #{detailNum} and  sitecart.memberIdx=#{memberIdx}
	</select>
	
	<select id="listCart" parameterType="Long" resultType="com.fa.plus.domain.site.SiteCart">
		SELECT sitecart.memberIdx,sitecart.detailNum,to_char(STARTDATE,'yyyy-mm-dd') STARTDATE,to_char(ENDDATE,'yyyy-mm-dd') ENDDATE,detailName,price,content,capacity,floor,filename thumbnail,siteName
		FROM sitecart
		left join sitedetail  on sitedetail.detailNum=sitecart.detailNum
		 left join campingsite on campingsite.sitenum=sitedetail.sitenum
		left join
		(select * from 
			(select row_number() over(partition by detailNum order by sdpicnum) rnum,filename,detailNum dnum 
			from sitedetailpic) where rnum=1
       	) on dnum=sitecart.detailNum
		WHERE sitecart.memberIdx=#{memberIdx}
		
	</select>
	
	<select id="dataCountCart" parameterType="Long" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM sitecart 
		where memberIdx=#{memberIdx}
	</select>
	<insert id="insertBookList" parameterType="map">
		insert into booklist(LISTNUM,ORDER_DATE,memberIdx,TOTALPRICE,STATE) 
			values(#{listNum},sysdate,#{memberIdx},#{totalPrice},1)
		
	</insert>
	<update id="updateBokkState" parameterType="map">
		update booklist set STATE=0 where LISTNUM=#{listNum}
	</update>
	<select id="listNum" resultType="Integer">
		select booklist_seq.nextval from dual
	</select>
	
	
	
	<insert id="insertBook" parameterType="com.fa.plus.domain.site.SiteCart">
		insert into book(BOOKNUM,STARTDATE,ENDDATE ,BOOKPRICE ,detailNum ,LISTNUM) 
			VALUES(book_seq.nextval,#{startDate},#{endDate},#{periodPrice},#{detailNum},booklist_seq.currval)
		
	</insert>
	
	<insert id="perchaseSite" parameterType="map">
		INSERT into bookpayment(BOOKNUM,PURCHASECOST,PURCHASEMETHOD,PURCHASEDATE) 
		values(#{listNum},#{totalPrice},#{perchaseMethod},sysdate)
		
	</insert>
	
	
	
	
	
	<select id="listBookList" parameterType="Long" resultType="com.fa.plus.domain.site.BookList">
		SELECT listNum,to_char(order_date,'yyyy-mm-dd') order_date, memberIdx,totalPrice 
		FROM booklist 
		WHERE memberIdx=#{memberIdx} and STATE=0
	</select>
	<select id="listBook" parameterType="map" resultType="com.fa.plus.domain.site.Book">
			SELECT bookNum,to_char(STARTDATE,'yyyy-mm-dd') STARTDATE,to_char(ENDDATE,'yyyy-mm-dd') ENDDATE,bookPrice, detailNum,book.listNum,filename
		,nvl(writeReview,0) writeReview,detailname,to_char(ORDER_DATE,'yyyy-mm-dd') ORDER_DATE
		FROM book
        left join booklist on book.listnum=booklist.listnum
        left join (select * from 
			(select row_number() over(partition by detailNum order by sdpicnum) rnum,filename,detailNum dnum 
			from sitedetailpic) where rnum=1
       	) on dnum=book.detailNum
       	left join (select 1 writeReview,booknum bnum from sitereview) on bnum=booknum
        left join (select detailname,detailNum ddnum from sitedetail) on ddnum =detailNum
		WHERE memberIdx=#{memberIdx} and state=0
		order by booknum desc
		offset #{offset} rows fetch first #{size} rows only
	</select>
	
	
	<insert id="insertReview" parameterType="com.fa.plus.domain.site.SiteReview">
	insert into sitereview(BOOKNUM,CONTENT,memberIdx,SCORE,REG_DATE,detailNum,siteNum,ENABLED)
		
		values(#{bookNum},#{content},#{memberIdx},#{score},sysdate,#{detailNum},#{siteNum},0)
	
		
	</insert>
	
	<!-- 추가 이미지 등록 -->
	<insert id="insertReviewFile" parameterType="com.fa.plus.domain.site.SiteReview">
		INSERT INTO sitereviewPic(SrPICNUM, booknum, fileName)
			VALUES(sitereviewPic_SEQ.NEXTVAL, #{booknum}, #{fileName})
	</insert>	
	
	
	<sql id="where-list-review">
		
		<choose>
			<when test="memberIdx!=null and memberIdx!=''">
				and memberIdx=#{memberIdx}
			</when>
			<when test="siteNum!=null and siteNum!=''">
				and siteNum=#{siteNum}
			</when>
			<when test="detailNum!=null and detailNum!=''">
				and detailNum=#{detailNum}
			</when>
		</choose>
	</sql>
	
	
	<select id="listSiteReivew" parameterType="map" resultType="com.fa.plus.domain.site.SiteReview">
		select BOOKNUM,CONTENT,MEMBERIDX,SCORE,to_char(REG_DATE,'yyyy-mm-dd') REG_DATE,ANSWER,ANSWERIDX,DETAILNUM,SITENUM,fileList
		 ,username,adminname
		 from sitereview
 	   left  JOIN (select memberIdx uidx,username from member1 ) m1 ON uidx = memberIdx
 		left	 JOIN (select memberIdx aidx,username adminname from member1 ) m2 ON aidx = ANSWERIDX
		 LEFT OUTER JOIN (
					SELECT BOOKNUM bnum, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY srpicNum) fileList
		            FROM sitereviewpic
		            GROUP BY booknum	
				) f ON BOOKNUM=bnum	
		 
		<where>
			enabled = 0
			<include refid="where-list-review"/>
		</where>
		  order by sitereview.booknum desc
		  offset #{offset} rows fetch first #{size} rows only
	</select>
	<select id="listSiteGoodReivew" parameterType="map" resultType="com.fa.plus.domain.site.SiteReview">
		select BOOKNUM,CONTENT,MEMBERIDX,SCORE,to_char(REG_DATE,'yyyy-mm-dd') REG_DATE,ANSWER,ANSWERIDX,DETAILNUM,SITENUM,fileList
		 ,username,adminname
		 from sitereview
 	   left  JOIN (select memberIdx uidx,username from member1 ) m1 ON uidx = memberIdx
 		left	 JOIN (select memberIdx aidx,username adminname from member1 ) m2 ON aidx = ANSWERIDX
		 LEFT OUTER JOIN (
					SELECT BOOKNUM bnum, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY srpicNum) fileList
		            FROM sitereviewpic
		            GROUP BY booknum	
				) f ON BOOKNUM=bnum	
		 
		<where>
			enabled = 0
			<include refid="where-list-review"/>
		</where>
		   order by score desc
		  fetch first 5 rows only
	</select>
	<select id="dataCountReview" parameterType="map" resultType="Integer">
		select NVL(COUNT(*), 0)
		 from sitereview
		<where>
			enabled = 0
			<include refid="where-list-review"/>
		</where>
		 
	</select>
	<update id="updateReview" parameterType="com.fa.plus.domain.site.SiteReview">
		 update sitereview set
		 	CONTENT=#{content},SCORE=#{score},REG_DATE=#{reg_date}
		 where booknum={bookNum}
	</update>

	
	<delete id="deleteReview" parameterType="Long">
		 delete from sitereview
		 where booknum={bookNum}
	</delete>
	
	<delete id="deleteReviewFile" parameterType="Long">
		DELETE FROM sitepic WHERE srPicNum = #{srPicNum}
	</delete>
	<delete id="deleteTrashBook1" parameterType="Long">
		DELETE FROM book where listnum=#{listNum}
	</delete>
	<delete id="deleteTrashBook2" >
		DELETE FROM booklist WHERE state=1
	</delete>
	<select id="getTrashNum" resultType="Long">
		select listnum from booklist where state=1
	</select>
	

	<select id="findByReview" parameterType="Long" resultType="com.fa.plus.domain.site.SiteReview">
		 select BOOKNUM,CONTENT,MEMBERIDX,SCORE,to_char(REG_DATE,'yyyy-mm-dd') REG_DATE,ANSWER,ANSWERIDX,DETAILNUM,SITENUM,fileList,username,adminname
			 from sitereview
			 JOIN (select memberIdx uidx,username from member1 ) m1 ON uidx = memberIdx
			 LEFT OUTER JOIN (select memberIdx aidx,username adminname from member1 ) m2 ON aidx = memberIdx
			 LEFT OUTER JOIN (
						SELECT BOOKNUM bnum, LISTAGG(filename, ',') WITHIN GROUP(ORDER BY srpicNum) fileList
			            FROM sitereviewpic
			            GROUP BY booknum	
					) f ON BOOKNUM=bnum	
		 where booknum={bookNum}
		 
	</select>
	
	<update id="updateReviewAnswer" parameterType="com.fa.plus.domain.site.SiteReview">
		 update sitereview set
		 	answer=#{answer},anweridx=#{answerIdx}
		 where booknum={bookNum}
	</update>
	
	<update id="updateSiteStar" parameterType="map">
		update campingsite set avgstar=#{star} 
		where sitenum=#{siteNum}
	</update>
	<select id="dataCountBook" parameterType="map" resultType="Integer">
		select NVL(COUNT(*), 0)
		 from book
         left join booklist on book.listnum=booklist.listnum
		<where>
				state=0
			<if test="memberIdx !=null and memberIdx !=''">
            	and memberIdx=#{memberIdx}
			</if>
			<if test="detailNum !=null and detailNum !=''">
            	and detailnum=#{detailNum}
			</if>
		</where>
		 
	</select>
	<select id="dataCountBookList" parameterType="Long" resultType="Integer">
		select NVL(COUNT(*), 0)
		 from booklist
		where memberidx=#{memberIdx} and state=0    
		 
	</select>
<!-- 리뷰 등록될떄마다 갱신 -->
<!-- update test set avenum=round((select avg(totalmoney) from productorder)/1000000,1) where num=1; -->
</mapper>