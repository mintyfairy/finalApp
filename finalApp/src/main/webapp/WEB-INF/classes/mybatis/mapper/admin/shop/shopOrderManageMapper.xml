<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fa.plus.admin.mapper.ShopOrderManageMapper">
	<sql id="where-list">
		<choose>
			<when test="schType == 'orderNum' ">
			   ( po.orderNum  = #{kwd} )
			</when>
			<when test="schType == 'invoiceNumber' ">
			   ( invoiceNumber  = #{kwd} )
			</when>
			<when test="schType == 'orderDate' ">
			   ( TO_CHAR(orderDate, 'YYYYMMDD') = #{kwd}
		          OR TO_CHAR(orderDate, 'YYYY-MM-DD') = #{kwd} )
			</when>
			<when test="schType == 'userName'">
			    INSTR(userName, #{kwd}) &gt; 0
			</when>
		</choose>
	</sql>

	<select id="orderCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM productOrder po
		LEFT OUTER JOIN member1 m ON po.memberIdx = m.memberIdx
		<where>
			<if test="state == 2">
				( po.orderState = 0 OR po.orderState = 1 ) 
			</if>
			<if test="state == 3">
				( po.orderState &gt;= 2 AND po.orderState &lt;= 5 ) 
			</if>
			<if test="orderStatus == 'exchange'">
				AND ( detailState IN (6, 7, 8, 9) )
			</if>
			<if test="orderStatus == 'refund'">
				AND ( detailState IN (10, 11, 12, 13) )
			</if>
			<if test="kwd!=null and kwd!='' ">
				AND <include refid="where-list"/>
			</if>
		</where>
	</select>
	
	<!-- 주문 내역리스트 선택 -->
	<select id="listOrder" parameterType="map" resultType="com.fa.plus.admin.domain.shop.ShopOrderManage">
		SELECT po.orderNum, po.memberIdx, NVL(userName, orderName) userName, totalMoney,  
			usedSaved, deliveryCharge, payment, cancelAmount,
            TO_CHAR(orderDate, 'YYYY-MM-DD HH24:MI') orderDate,
            orderState, deliveryName, invoiceNumber, detailState, 
            NVL(totalOrderCount, 0) totalOrderCount, NVL(totalQty, 0) totalQty,
            NVL(detailCancelCount, 0) detailCancelCount
		FROM productOrder po
		LEFT OUTER JOIN member1 m ON po.memberIdx = m.memberIdx 
        LEFT OUTER JOIN (
            SELECT orderNum, COUNT(*) totalOrderCount, SUM(qty) totalQty, detailState, 
            	COUNT(DECODE(detailState,3,1,4,1,5,1,10,1,11,1,12,1)) detailCancelCount
            FROM orderDetail
            GROUP BY orderNum, detailState 
        ) od ON po.orderNum = od.orderNum
		<where>
			<if test="state == 2">
				( po.orderState = 0 OR po.orderState = 1 ) 
			</if>
			<if test="state == 3">
				( po.orderState &gt;= 2 AND po.orderState &lt;= 5 ) 
			</if>
			<if test="orderStatus == 'exchange'">
				AND ( detailState IN (6, 7, 8, 9) )
			</if>
			<if test="orderStatus == 'refund'">
				AND ( detailState IN (4, 5, 10, 11, 12, 13) )
			</if>
			<if test="kwd!=null and kwd!='' ">
				AND <include refid="where-list"/>
			</if>
		</where>
        ORDER BY po.orderNum DESC
        OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="findById" parameterType="Long" resultType="com.fa.plus.admin.domain.shop.ShopOrderManage">
		SELECT po.orderNum, po.memberIdx, NVL(userName, orderName) userName, orderDate, totalMoney, 
			usedSaved, deliveryCharge, payment, cancelAmount, orderState, 
			TO_CHAR(orderStateDate, 'YYYY-MM-DD HH24:MI:SS') orderStateDate, deliveryName, invoiceNumber, 
			payMethod, cardName, authNumber, authDate
		FROM productOrder po
		LEFT OUTER JOIN member1 m ON po.memberIdx = m.memberIdx
		LEFT OUTER JOIN payDetail pd ON po.orderNum = pd.orderNum 
		WHERE po.orderNum = #{orderNum}
	</select>
	
	<select id="findByOrderDetails" parameterType="Long" resultType="com.fa.plus.admin.domain.shop.ShopOrderDetailManage">
		SELECT od.orderNum, od.orderDetailNum, qty, od.price, salePrice, productMoney, od.savedMoney,
			op.detailNum, op.optionValue, od.detailNum2, op2.optionValue optionValue2,
			od.productNum, productName, 
			od.detailState
		FROM orderDetail od
		JOIN product p ON od.productNum = p.productNum
		JOIN optionDetail op ON od.detailNum = op.detailNum
		JOIN optionDetail op2 ON od.detailNum2 = op2.detailNum
		WHERE od.orderNum = #{orderNum}
	</select>
	
	<select id="orderDetailCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM productOrder po
		LEFT OUTER JOIN member1 m ON po.memberIdx = m.memberIdx 		
		JOIN orderDetail od ON po.orderNum = od.orderNum
		<where>
			<if test="state == 2">
				( po.orderState = 0 OR po.orderState = 1 ) 
			</if>
			<if test="state == 3">
				( po.orderState &gt;= 2 AND po.orderState &lt;= 5 ) 
			</if>
			<if test="kwd!=null and kwd!='' ">
				AND <include refid="where-list"/>
			</if>
		</where>
	</select>
	
	<select id="listOrderDetail" parameterType="map" resultType="com.fa.plus.admin.domain.shop.ShopOrderManage">
		SELECT po.orderNum, po.memberIdx, NVL(userName,'손님') userName, orderDate, totalMoney, od.savedMoney, 
			cancelAmount, usedSaved, deliveryCharge, payment, od.qty, salePrice,
			od.orderDetailNum, 
			op.detailNum, op.optionValue, od.detailNum2, op2.optionValue optionValue2,
			od.productNum, productMoney, productName, 
			orderState, od.detailState,
			deliveryName, invoiceNumber
		FROM productOrder po
		LEFT OUTER JOIN member1 m ON po.memberIdx = m.memberIdx 
		JOIN orderDetail od ON po.orderNum = od.orderNum
		JOIN product p ON od.productNum = p.productNum
		JOIN optionDetail op ON od.detailNum = op.detailNum
		JOIN optionDetail op2 ON od.detailNum2 = op2.detailNum
		ORDER BY po.orderNum DESC, od.orderDetailNum
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
		<where>
			<if test="state == 2">
				( po.orderState = 0 OR po.orderState = 1 ) 
			</if>
			<if test="state == 3">
				( po.orderState &gt;= 2 AND po.orderState &lt;= 5 ) 
			</if>
			<if test="kwd!=null and kwd!='' ">
				AND <include refid="where-list"/>
			</if>
		</where>
	</select>
	
	<update id="updateOrderState" parameterType="map">
		UPDATE productOrder SET orderState = #{orderState}, orderStateDate = SYSDATE
		WHERE orderNum = #{orderNum}
	</update>
	
	<update id="updateOrderDetailState" parameterType="map">
		UPDATE orderDetail SET detailState = #{detailState} 
		WHERE orderDetailNum = #{orderDetailNum}
	</update>
	
	<!-- 주문에 대한 상세 주문의 주문 취소 이외의 개수 -->
	<select id="totalOrderCount" parameterType="Long" resultType="Integer">
		SELECT NVL(COUNT(*), 0) orderCount
		FROM orderDetail 
		WHERE orderNum = #{orderNum} AND (detailState != 3 AND detailState != 5 AND detailState != 12)
	</select>
	
	<select id="listDeliveryCompany" resultType="map">
		SELECT deliveryNum, deliveryName, deliveryTel
		FROM deliveryCompany
	</select>
	
	<update id="updateCancelAmount" parameterType="map">
		UPDATE productOrder SET cancelAmount = #{cancelAmount}
		WHERE orderNum = #{orderNum}
	</update>
	
	<update id="updateOrderInvoiceNumber" parameterType="map">
		UPDATE productOrder SET orderState = #{orderState}, orderStateDate = SYSDATE, 
				deliveryName = #{deliveryName}, invoiceNumber = #{invoiceNumber}
		WHERE orderNum = #{orderNum}
	</update>
	
	<update id="updateProductStock" parameterType="map">
		UPDATE productStock SET totalStock = #{totalStock} 
		WHERE productNum = #{productNum} AND detailNum = #{detailNum} AND detailNum2 = #{detailNum2}
	</update>
	
	<select id="selectTotalStock" parameterType="map" resultType="Integer">
		SELECT totalStock FROM productStock 
		WHERE productNum = #{productNum} AND detailNum = #{detailNum} AND detailNum2 = #{detailNum2}

	</select>
	
	<update id="orderDetailCancel" parameterType="Long">
		UPDATE orderDetail SET qty = 0 
			WHERE orderDetailNum = #{orderDetailNum}
	</update>
	
	<insert id="insertDetailStateInfo" parameterType="map">
		INSERT INTO detailStateInfo(stateNum, orderDetailNum, memberIdx, detailState, stateMemo, detailStateDate) VALUES
			(detailStateInfo_seq.NEXTVAL, #{orderDetailNum}, #{memberIdx}, #{detailState}, 
				#{stateMemo,jdbcType=VARCHAR}, SYSDATE)
	</insert>
	
	<select id="listDetailStateInfo" parameterType="long" resultType="map">
		SELECT stateNum, orderDetailNum, d.memberIdx, NVL(userName, '손님') userName, detailState,
			 stateMemo, TO_CHAR(detailStateDate, 'YYYYMMDD HH24:MI') detailStateDate
		FROM detailStateInfo d
		LEFT OUTER JOIN member1 m ON d.memberIdx = m.memberIdx
		WHERE orderDetailNum = #{orderDetailNum}
		ORDER BY stateNum DESC
	</select>
	
	
	<!-- 배송완료 5일 후 자동 구매확정 -->
	<select id="listExpiredPeriodOrder" resultType="Long">
		SELECT orderDetailNum
		FROM productOrder po
		JOIN orderDetail od ON po.orderNum = od.orderNum
		WHERE po.orderState = 5 AND od.detailState = 0
	  			AND TRUNC(SYSDATE - orderStateDate) &gt;= 5
	</select>

	<update id="updateAutoPurchaseconfirmation" parameterType="Long">
		UPDATE orderDetail SET detailState = 2
		WHERE orderDetailNum = #{orderDetailNum}
	</update>
	
	<select id="getSavedMoney" parameterType="Long" resultType="Integer">
		SELECT savedMoney FROM orderDetail
		WHERE orderDetailNum = #{orderDetailNum};
	</select>
	
	<!-- 
	<update id="updateAutoPurchaseconfirmation2">
		UPDATE orderDetail SET detailState = 2
		WHERE orderDetailNum IN (
			SELECT orderDetailNum
			FROM productOrder po
			JOIN orderDetail od ON po.orderNum = od.orderNum
			WHERE po.orderState = 5 AND od.detailState = 0
    			AND TRUNC(SYSDATE - orderStateDate) &gt;= 5
		)
	</update>
	-->
	
	<select id="getTotalPoint" parameterType="Long" resultType="Integer">
		SELECT totalPoint FROM userPoint WHERE memberIdx = #{memberIdx}
	</select>
	
	<update id="updateUserPoint" parameterType="map">
		UPDATE userPoint SET totalPoint = #{totalPoint}, getPoint = #{getPoint}, 
		updatePointDate = SYSDATE 
		WHERE memberIdx = ${memberIdx}
	</update>

	<select id="getMemberIdx" parameterType="Long" resultType="Long">
		SELECT memberIdx FROM productOrder po
		JOIN orderDetail od ON po.orderNum = od.orderNum
		WHERE orderDetailNum = #{orderDetailNum}
	</select>

</mapper>