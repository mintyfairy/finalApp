<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fa.plus.admin.mapper.ShopProductManageMapper">
	<!-- 상품 등록 -->
	<select id="productSeq" resultType="Long">
		SELECT product_seq.NEXTVAL FROM dual
	</select>
	
	<insert id="insertProduct" parameterType="com.fa.plus.admin.domain.shop.ShopProductManage">
		INSERT INTO product(productNum, categoryNum, 
		productName, special, price, discountRate, 
		savedMoney, delivery, content, thumbnail, 
		productShow, reg_date, updateDate, md, 
		starter, brandNum) VALUES (#{productNum}, 
		#{categoryNum}, #{productName}, #{special}, 
		#{price}, #{discountRate}, #{savedMoney}, 
		#{delivery}, #{content, jdbcType=VARCHAR}, #{thumbnail}, #{productShow}, 
		SYSDATE, SYSDATE, #{md}, #{starter}, #{brandNum})
	</insert>
	
	<!-- 추가 이미지 등록 -->
	<insert id="insertProductFile" parameterType="com.fa.plus.admin.domain.shop.ShopProductManage">
		INSERT INTO productFile(fileNum, productNum, filename)
			VALUES(productFile_seq.NEXTVAL, #{productNum}, #{filename})
	</insert>
	
	<!-- 상위/하위 옵션 등록 -->
	<select id="optionSeq" resultType="Long">
		SELECT productOption_seq.NEXTVAL FROM dual
	</select>
	
	<insert id="insertProductOption" parameterType="com.fa.plus.admin.domain.shop.ShopProductManage">
		INSERT INTO productOption(optionNum, optionName, 
		productNum, parentNum) 
		VALUES (#{optionNum}, #{optionName}, 
		#{productNum}, #{parentNum, jdbcType=INTEGER})
	</insert>
	
	<!-- 옵션 상세 정보 등록 -->
	<select id="detailSeq" resultType="Long">
		SELECT optionDetail_seq.NEXTVAL FROM dual
	</select>
	
	<insert id="insertOptionDetail" parameterType="com.fa.plus.admin.domain.shop.ShopProductManage">
		INSERT INTO optionDetail(detailNum, optionNum, optionValue) 
		VALUES(#{detailNum}, #{optionNum}, #{optionValue})
	</insert>
	
	<!-- 브랜드 정보 등록 -->
	<insert id="insertBrand" parameterType="com.fa.plus.admin.domain.shop.ShopProductManage">
		INSERT INTO brand(brandNum, brandName, showOrderNo, reg_date) 
		VALUES(brand_seq.NEXTVAL, #{brandName}, #{showOrderNo}, SYSDATE)
	</insert>
	
	<!-- 상품 카테고리 -->
	<select id="findByCategory" parameterType="Long" resultType="com.fa.plus.admin.domain.shop.ShopProductManage">
		SELECT categoryNum, categoryName, use, showNo, parentNum 
		FROM productCategory 
		WHERE categoryNum = #{categoryNum}
	</select>
	
	<!-- 상품 상위 카테고리 목록 -->
	<select id="listCategory" resultType="com.fa.plus.admin.domain.shop.ShopProductManage">
		SELECT categoryNum, categoryName, use, showNo, parentNum 
		FROM productCategory 
		WHERE use = 1 AND parentNum IS NULL 
		ORDER BY showNo
	</select>
	
	<!-- 상품 하위 카테고리 목록 -->
	<select id="listSubCategory" parameterType="Long" resultType="com.fa.plus.admin.domain.shop.ShopProductManage">
		SELECT categoryNum, categoryName, use, showNo, parentNum 
		FROM productCategory 
		WHERE use = 1 AND parentNum = #{parentNum}
		ORDER BY showNo
	</select>
	
	<select id="listBrand" resultType="com.fa.plus.admin.domain.shop.ShopProductManage">
		SELECT brandNum, brandName 
		FROM brand 
		ORDER BY brandName
	</select>
	
	<!-- 상품 목록 -->
	<sql id="where-list">
		<if test="schType=='all'">
			(INSTR(productName, #{kwd}) &gt; 0 
				OR DBMS_LOB.INSTR(content, #{kwd}) &gt; 0 
				OR INSTR(brandName, #{kwd}) &gt; 0)
		</if>
		<if test="schType=='productName'">
			INSTR(productName, #{kwd}) &gt; 0
		</if>
		<if test="schType=='brandName'">
			INSTR(brandName, #{kwd}) &gt; 0
		</if>
		<if test="schType=='content'">
			DBMS_LOB.INSTR(content, #{kwd}) &gt; 0
		</if>
	</sql>
	
	<!-- 미완성 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) 
		FROM product p 
		<where>
			productShow = #{productShow} 
			<if test="categoryNum != 0 and categoryNum != ''">
				AND a.categoryNum = #{categoryNum}
			</if>
			<if test="special != 0 and special != ''">
				AND special = #{special} 
			</if>
			<if test="starter != 0 and starter != ''">
				AND starter = #{starter} 
			</if>
			<if test="md != 0 and md != ''">
				AND md = #{md} 
			</if>
			<if test="brandNum != 0 and brandNum != ''">
				AND b.brandNum = #{brandNum} 
			</if>
			<if test="kwd != null and kwd != ''">
				AND <include refid="where-list"/>
			</if>
		</where>
	</select>
	
	<select id="listProduct" parameterType="map" resultType="com.fa.plus.admin.domain.shop.ShopProductManage">
		SELECT a.*, brandName 
		FROM 
	        (SELECT p.productNum, categoryNum, 
	        md, starter, special, productName, thumbnail, 
	        price, discountRate, productShow, reg_date, 
	        TO_CHAR(updateDate, 'YYYY-MM-DD') updateDate, 
			NVL(totalStock, 0) totalStock, p.brandNum 
		FROM product p 
		LEFT OUTER JOIN ( 
			SELECT productNum, NVL(SUM(totalStock), 0) totalStock 
			FROM productStock 
			GROUP BY productNum 
		) t ON p.productNum = t.productNum) a JOIN brand b ON a.brandNum = b.brandNum
		<where>
			productShow = #{productShow} 
			<if test="categoryNum != 0 and categoryNum != ''">
				AND a.categoryNum = #{categoryNum}
			</if>
			<if test="special != 0 and special != ''">
				AND special = #{special} 
			</if>
			<if test="starter != 0 and starter != ''">
				AND starter = #{starter} 
			</if>
			<if test="md != 0 and md != ''">
				AND md = #{md} 
			</if>
			<if test="brandNum != 0 and brandNum != ''">
				AND b.brandNum = #{brandNum} 
			</if>
			<if test="kwd != null and kwd != ''">
				AND <include refid="where-list"/>
			</if>
		</where>
		ORDER BY a.productNum DESC 
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<!-- 상품 상세 정보 -->
	<select id="findById" parameterType="Long" resultType="com.fa.plus.admin.domain.shop.ShopProductManage">
		SELECT f.*, b.brandName 
		FROM 
		(SELECT productNum, productName, 
		special, price, c.categoryNum, c.categoryName, 
		parentNum, discountRate, savedMoney, delivery, 
		content, thumbnail, productShow, 
		reg_date, updateDate, md, starter, 
		deletion, brandNum 
		FROM product p 
		JOIN productCategory c 
		ON p.categoryNum = c.categoryNum) f 
		JOIN brand b ON f.brandNum = b.brandNum 
		WHERE productNum = #{productNum}
	</select>
	
	<select id="listProductFile" parameterType="Long" resultType="com.fa.plus.admin.domain.shop.ShopProductManage">
		SELECT fileNum, productNum, fileName 
		FROM productFile 
		WHERE productNum = #{productNum}
	</select>
	
	<!-- 상위/하위 옵션 -->
	<select id="listProductOption" parameterType="Long" resultType="com.fa.plus.admin.domain.shop.ShopProductManage">
		SELECT optionNum, optionName, productNum, parentNum 
		FROM productOption WHERE productNum = #{productNum} 
		ORDER BY parentNum NULLS FIRST, parentNum
	</select>
	
	<!-- 옵션 상세 정보 -->
	<select id="listOptionDetail" parameterType="Long" resultType="com.fa.plus.admin.domain.shop.ShopProductManage">
		SELECT detailNum, optionValue, optionNum 
		FROM optionDetail 
		WHERE optionNum = #{optionNum} 
		ORDER BY detailNum
	</select>
	
	<!-- brand 수정 -->
	<update id="updateBrand" parameterType="com.fa.plus.admin.domain.shop.ShopProductManage">
		UPDATE brand SET brandName = #{brandName}, 
		showBrand = #{showBrand} 
		WHERE brandNum = #{brandNum}
	</update>
	
	<!-- 재고 -->
	<select id="listProductStock" parameterType="Long" resultType="com.fa.plus.admin.domain.shop.ShopProductManage">
		SELECT p.productNum, productName, o1.optionNum AS optionNum, 
		o1.optionName AS optionName, o2.optionNum AS optionNum2, 
		o2.optionName AS optionName2, d1.detailNum AS detailNum, 
		d1.optionValue AS optionValue, d2.detailNum AS detailNum2, 
		d2.optionValue AS optionValue2, NVL(stockNum, 0) stockNum, 
		NVL(totalStock, 0) totalStock 
		FROM product p 
		JOIN ( 
		    SELECT productNum, optionNum, optionName, parentNum 
		    FROM productOption WHERE 
		    productNum = #{productNum} AND parentNum IS NULL) o1 
		ON p.productNum = o1.productNum 
		LEFT OUTER JOIN ( 
		    SELECT optionNum, optionName, parentNum 
		    FROM productOption WHERE 
		    productNum = #{productNum} AND parentNum IS NOT NULL) o2 
		ON o1.optionNum = o2.parentNum 
		JOIN optionDetail d1 ON o1.optionNum = d1.optionNum 
		LEFT OUTER JOIN optionDetail d2 
		ON o2.optionNum = d2.optionNum 
		LEFT OUTER JOIN productStock s 
		ON d1.detailNum = s.detailNum AND d2.detailNum = s.detailNum2 
		WHERE p.productNum = #{productNum} 
		ORDER BY detailNum, detailNum2
	</select>
	
	<select id="findTotalStock" parameterType="Long" resultType="Integer">
		SELECT totalStock FROM productStock 
		WHERE stockNum = #{stockNum}
	</select>
	
	<insert id="insertProductStock" parameterType="com.fa.plus.admin.domain.shop.ShopProductManage">
		INSERT INTO productStock(stockNum, totalStock, 
		productNum, detailNum, detailNum2) 
		VALUES(productStock_seq.NEXTVAL, #{totalStock}, 
		#{productNum}, #{detailNum}, #{detailNum2})
	</insert>
	
	<update id="updateProductStock" parameterType="com.fa.plus.admin.domain.shop.ShopProductManage">
		UPDATE productStock SET 
		totalStock = #{totalStock} 
		WHERE stockNum = #{stockNum}
	</update>
	
	<update id="deleteProductStock1" parameterType="Long">
		DELETE FROM productStock 
		WHERE detailNum = #{detailNum}
	</update>
	
	<update id="deleteProductStock2" parameterType="Long">
		DELETE FROM productStock 
		WHERE detailNum2 = #{detailNum}
	</update>
	
	<!-- productShow(상품 진열 여부) 수정 -->
	<update id="updateListProduct" parameterType="map">
		UPDATE product SET productShow = #{productShow} 
		WHERE productNum = #{productNum}
	</update>
	
	
	<!-- 상품 수정 -->
	<update id="updateProduct" parameterType="com.fa.plus.admin.domain.shop.ShopProductManage">
		UPDATE product SET productName = #{productName}, 
		price = #{price}, categoryNum = #{categoryNum}, 
		discountRate = #{discountRate}, savedMoney = #{savedMoney}, 
		starter = #{starter}, md = ${md}, special = ${special}, 
		productShow = ${productShow}, delivery = #{delivery}, content = #{content}, 
		thumbnail = #{thumbnail}, updateDate = SYSDATE, 
		brandNum = #{brandNum} 
		WHERE productNum = #{productNum}
	</update>
	
	<delete id="deleteProduct" parameterType="Long">
		DELETE FROM product WHERE productNum = #{productNum}
	</delete>
	
	<update id="updateHide" parameterType="map">
		UPDATE product SET 
		productShow = #{productShow} 
		WHERE productNum = #{productNum}
	</update>
	
	<!-- 상품 사진 삭제 -->
	<delete id="deleteProductFile" parameterType="Long">
		DELETE FROM productFile WHERE fileNum = #{fileNum}
	</delete>

	<!-- 옵션 변경 -->
	<update id="updateProductOption" parameterType="com.fa.plus.admin.domain.shop.ShopProductManage">
		UPDATE productOption SET optionName = #{optionName} 
		WHERE optionNum = #{optionNum}
	</update>
	
	<!-- 옵션 삭제 -->
	<delete id="deleteProductOption" parameterType="Long">
		DELETE FROM productOption WHERE optionNum = #{optionNum}
	</delete>
	
	<update id="updateOptionDetail" parameterType="com.fa.plus.admin.domain.shop.ShopProductManage">
		UPDATE optionDetail SET optionValue = #{optionValue} 
		WHERE detailNum = #{detailNum}
	</update>
	
	<delete id="deleteOptionDetail" parameterType="Long">
		DELETE FROM optionDetail WHERE detailNum = #{detailNum}
	</delete>
	
	
	
</mapper>